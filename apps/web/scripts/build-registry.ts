import fs from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";
import * as prettier from "prettier";
import { rimrafSync } from "rimraf";
import { BASE_COLORS, getColors, type BaseColorKeys } from "../registry/colors";
import { framework } from "../registry/framework";
import { getRegistry } from "../registry/registry";
import { registrySchema } from "../registry/schema";

const REGISTRY_PATH = path.join(path.dirname(fileURLToPath(import.meta.url)), "..", "public/registry");
const REGISTRY_SOURCE = path.join(path.dirname(fileURLToPath(import.meta.url)), "..", "registry");

const registry = await getRegistry();
const result = registrySchema.safeParse(registry);

if (!result.success) {
  console.error(result.error);
  process.exit(1);
}

// ----------------------------------------------------------------------------
// NOTE Build __registry__/index.ts
// ----------------------------------------------------------------------------
let index = `// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
export const Index = {
    `;

for (const item of result.data) {
  if (item.framework !== "react") continue; // we'll only use react component for the examples
  //   if (item.type === "components:ui") continue;
  const resolveFiles = item.files.map((file) => `@/registry/${file}`);
  index += `
    "${item.name}": {
        name: "${item.name}",
        type: "${item.type}",
        registryDependencies: ${JSON.stringify(item.registryDependencies)},
        component: () => import ("${item.files}"),
        files: [${resolveFiles.map((file) => `"${file}"`)}],
    },
    `;
}
index += `}`;

const __registry__ = path.join(path.dirname(fileURLToPath(import.meta.url)), "..", "__registry__/index.ts");
rimrafSync(__registry__);
fs.writeFileSync(__registry__, await prettier.format(index, { parser: "babel-ts" }));

// ----------------------------------------------------------------------------
// NOTE Build public/registry/index.json
// ----------------------------------------------------------------------------
const names = result.data.filter((item) => item.type === "components:ui");
const registryJson = JSON.stringify(names, null, 2);
rimrafSync(path.join(REGISTRY_PATH, "index.json"));
fs.writeFileSync(path.join(REGISTRY_PATH, "index.json"), await prettier.format(registryJson, { parser: "json-stringify" }));
// ----------------------------------------------------------------------------
// NOTE Build public/registry/frameworks/index.json
// ----------------------------------------------------------------------------
const frameworksJson = JSON.stringify(framework, null, 2);
rimrafSync(path.join(REGISTRY_PATH, "frameworks/index.json"));
fs.writeFileSync(path.join(REGISTRY_PATH, "frameworks/index.json"), await prettier.format(frameworksJson, { parser: "json-stringify" }));
// ----------------------------------------------------------------------------
// NOTE Build public/registry/frameworks/[framework]/[name].json
// ----------------------------------------------------------------------------
for (const fw of framework) {
  const targetPath = path.join(REGISTRY_PATH, "frameworks", fw.name);
  if (!fs.existsSync(targetPath)) fs.mkdirSync(targetPath, { recursive: true });
  for (const item of result.data) {
    if (item.type !== "components:ui") continue;
    if (item.framework !== fw.name) continue; // skipping unmatch framework type
    const files = item.files.map((file) => {
      const content = fs.readFileSync(path.join(REGISTRY_SOURCE, fw.name, file), "utf-8");
      return {
        name: path.basename(file),
        content,
      };
    });

    const payload = {
      ...item,
      files,
    };
    const payloadJson = JSON.stringify(payload, null, 2);
    rimrafSync(path.join(targetPath, `${item.name}.json`));
    fs.writeFileSync(path.join(targetPath, `${item.name}.json`), await prettier.format(payloadJson, { parser: "json-stringify" }));
  }
}
// ----------------------------------------------------------------------------
// NOTE Build public/registry/colors/index.json
// ----------------------------------------------------------------------------
const colorsJson = JSON.stringify(BASE_COLORS, null, 2);
rimrafSync(path.join(REGISTRY_PATH, "colors/index.json"));
fs.writeFileSync(path.join(REGISTRY_PATH, "colors/index.json"), await prettier.format(colorsJson, { parser: "json-stringify" }));
// ----------------------------------------------------------------------------
// NOTE Build public/registry/colors/[base].json
// ----------------------------------------------------------------------------
export const BASE_STYLES = `@tailwind base;
@tailwind components;
@tailwind utilities;
`;
for (const baseColor of BASE_COLORS.map((_, i) => Object.keys(BASE_COLORS[i])[0])) {
  const scheme = getColors(baseColor as BaseColorKeys, "hsl");
  let vars = `{`;
  vars += `"cssVarsTemplate": "${BASE_STYLES} `;
  vars += `@layer base { `;
  const keys = [...Object.keys(scheme.light)];
  let light = ` :root { `;
  let dark = ` } .dark { `;
  for (const key of keys) {
    const kebabKeys = key.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? "-" : "") + $.toLowerCase());
    light += `--${kebabKeys}: ${scheme.light[key]}; `;
    dark += `--${kebabKeys}: ${scheme.dark[key]}; `;
  }
  vars += light + dark;
  vars += ` } }" }`;
  const format = await prettier.format(JSON.parse(JSON.stringify(vars)).cssVarsTemplate, { parser: "scss" });
  const colorJson = JSON.stringify(format.replaceAll("\n", ""), null, 2);
  rimrafSync(path.join(REGISTRY_PATH, `colors/${baseColor}.json`));
  fs.writeFileSync(path.join(REGISTRY_PATH, `colors/${baseColor}.json`), await prettier.format(JSON.parse(colorJson), { parser: "json-stringify" }));
}
